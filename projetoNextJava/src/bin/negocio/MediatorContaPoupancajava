package negocio;

import java.util.Arrays;
import java.util.List;

import dao.DAOContaPoupanca;
import entidade.ContaPoupanca;
import entidade.ContaPoupanca;

public class MediatorContaPoupanca {
    DAOContaPoupanca daoContaPoupanca = new DAOContaPoupanca();
    public MediatorContaPoupanca(){
        
    }
    public String incluir(ContaPoupanca conta){
        if (stringNulaOuVazia(conta.getNumero())){
            return "Número da conta inválida ou vazia.";
        } else if (conta.getNumero().length()<5 || conta.getNumero().length()>8){
            return "O número da conta deve ter entre 5 a 8 caracteres.";
        } else if (conta.getSaldo() < 0) {
            return "O saldo não pode ser menor que zero.";
        } else if (stringNulaOuVazia(conta.getNomeCorrentista())) {
            return "Nome do correntista inválido ou vazio.";
        } else if (conta.getNomeCorrentista().length() > 60) {
            return "O nome do correntista deve conter no máximo 60 caracteres.";
        } else if (conta instanceof ContaPoupanca) {
            if (((ContaPoupanca) conta).getPercentualBonus() < 0) {
                return "O percentual de bônus não pode ser menor que zero.";
            }
        } else {
            boolean ret = daoContaPoupanca.incluir(conta);
            if (!ret) {
                return "Conta já existente.";
            }
        }
        return null;
    }
    public String creditar(double valor, String numero) {
        if (valor < 0) {
            return "Valor não pode ser menor que zero.";
        } else if (stringNulaOuVazia(numero)) {
            return "Número da conta inválido ou vazio.";
        } else {
            ContaPoupanca conta = daoContaPoupanca.buscar(numero);
            if (conta == null) {
                return "Conta inexistente.";
            } else {
                conta.creditar(valor);
                daoContaPoupanca.alterar(conta);
                return null;
            }
        }
    }

    public String debitar(double valor, String numero) {
        if (valor < 0) {
            return "Valor não pode ser menor que zero.";
        } else if (stringNulaOuVazia(numero)) {
            return "Número da conta inválido ou vazio.";
        } else {
            ContaPoupanca conta = daoContaPoupanca.buscar(numero);
            if (conta == null) {
                return "Conta inexistente.";
            } else {
                if (conta.getSaldo() < valor) {
                    return "O valor solicitado excede o saldo da conta.";
                } else {
                    conta.debitar(valor);
                    daoContaPoupanca.alterar(conta);
                    return null;
                }
            }
        }
    }

    public ContaPoupanca buscar(String numero) {
        if (stringNulaOuVazia(numero)) {
            return null;
        } else {
            return daoContaPoupanca.buscar(numero);
        }
    }

    public List<ContaPoupanca> gerarRelatorioGeral() {
        ContaPoupanca[] contas = daoContaPoupanca.buscarTodos();
        List<ContaPoupanca> listaContas = Arrays.asList(contas);
        listaContas.sort(new ComparadorContaPoupancaSaldo());
        return listaContas;
    }

    private boolean stringNulaOuVazia(String valor) {
        return valor == null || valor.trim().isEmpty();
    }
}
